
user  nginx;
worker_processes  1;

error_log  stderr info;
pid        /var/run/nginx.pid;
include /usr/share/nginx/modules/*.conf;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    log_format access '"$http_x_forwarded_for" - $remote_addr - $remote_user [$time_local] '
        '"$request" $status $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$request_time rt" "$request_length rx" "$gzip_ratio"';
    access_log /var/log/nginx/access.log access;


    # Headers get big
    proxy_headers_hash_bucket_size 128;
    proxy_headers_hash_max_size    1024;

    ### For some reason, the variables_hash_ settings are broken in 1.10.1-3+precise1
    variables_hash_bucket_size 128;
    variables_hash_max_size    1024;

    ### More maps
    map_hash_bucket_size 128;

    # We use very large URLS. This is NGINX's upper limit: remove when we fix cubes (for example)
    # to use POST instead of GET
    # See https://trac.nginx.org/nginx/ticket/894 for details
    large_client_header_buffers 4 64k;

    client_max_body_size 100m;
    server_tokens        off;

    gzip on;
    gzip_disable "msie6";
    gzip_min_length  1000;
    gzip_proxied     expired no-cache no-store private auth;
    gzip_types
        text/css
        text/plain
        text/javascript
        text/js
        text/xml
        text/x-component
        application/font-sfnt
        application/font-woff
        application/font-woff2
        application/javascript
        application/json
        application/xml
        application/rss+xml
        application/vnd.ms-fontobject
        image/svg+xml;

    # gzip_vary on;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;

    resolver 127.0.0.11;

    ### These are the CORS settings
    map $http_origin $cors_origin {
        default '';
        "~^https?://(localhost\.localdomain|local\.girishcodealchemy\.io)(:(\d+))?$" "$http_origin";
        "~^https?://.*\.girishcodealchemy.io$" "$http_origin";
        "~^https?://girishcodealchemy.io$" "$http_origin";
    }

    map $cors_origin $cors_allow_methods {
        default '';
        "~.*"   'OPTIONS, AUTH, POST, GET, PATCH, HEAD, PUT, DELETE';
    }

    map $cors_origin $cors_geo_allow_methods {
        default '';
        "~.*"   'OPTIONS, GET';
    }

    map $cors_origin $cors_max_age {
        default '';
        "~.*"   '1000';
    }
    map $cors_origin $cors_allow_credentials {
        default '';
        "~.*"   'true';
    }
    map $cors_origin $cors_allow_headers {
        default '';
        "~.*"   'Expires, Content-Type, Origin, Accept, Cookie, Cache-Control, X-girishcodealchemy-User, Authorization, X-GIRISHCODEALCHEMY-TRACING, girishcodealchemy-client';
    }
    map $cors_origin $cors_expose_headers {
        default '';
        "~.*"   'Expires, Allow, Location';
    }

    map $host$uri $redir_root {
        default '';
        "~^beta\.girishcodealchemy\.io/(index\.html|login)?$" 'redir';
    }

    map $host $redir_host {
        default $host;
        # ELB adds an ipv4 $host
        "~^\d+\.\d+\.\d+\.\d+$" "local.girishcodealchemy.io";
        # vagrant has a blank $host, which breaks the redirect
        "" "local.girishcodealchemy.io";
    }

    server {
        listen [::]:80 default_server;
        listen 80 default_server;
        listen 28080;
        listen [::]:28080;

        return 301 "https://$redir_host:8443$request_uri";
    }

    server {
        listen [::]:28081 default_server;
        listen 28081 default_server;
        set $upstream_girishcodealchemyapp_admin http://superadmin:8081;

        ssl on;
        ssl_certificate /pki/io.girishcodealchemy.local.pem;
        ssl_certificate_key /pki/io.girishcodealchemy.local.key;

        ssl_session_timeout 5m;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers 'AES128+EECDH:AES128+EDH';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;

        location / {
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass $upstream_girishcodealchemyapp_admin;

            location /socket.io {
                proxy_pass http://socket_io:3000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
            }

        }
    }

    server {
        listen [::]:8443 default_server;
        listen 8443 default_server;
        listen [::]:18443;
        listen 18443;
        root /whaam;
        server_name local.girishcodealchemy.io;
        set $upstream_girishcodealchemyapp http://cr.server:8080;

        ssl on;
        ssl_certificate /pki/io.girishcodealchemy.local.pem;
        ssl_certificate_key /pki/io.girishcodealchemy.local.key;

        ssl_session_timeout 5m;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers 'AES128+EECDH:AES128+EDH';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;

        #Beta GET requests on root should redirect to app, other requests should go through
        #more_set_headers "X-TEST: '$redir_root' $scheme://$redir_host$uri";
        if ($redir_root) {
            return 301 https://local.girishcodealchemy.io:18443/;
        }

        location / {
            # CORS headers
            more_set_headers "Access-Control-Allow-Origin: $cors_origin";
            more_set_headers "Access-Control-Allow-Methods: $cors_allow_methods";
            more_set_headers "Access-Control-Max-Age: $cors_max_age";
            more_set_headers "Access-Control-Allow-Credentials: $cors_allow_credentials";
            more_set_headers "Access-Control-Allow-Headers: $cors_allow_headers";
            more_set_headers "Access-Control-Expose-Headers: $cors_expose_headers";

            more_set_headers "X-XSS-Protection: 1; mode=block";
            more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains";
            more_set_headers "X-Content-Type-Options: nosniff";

            # First attempt to serve request as file, then
            # as directory, then fall back to index.html
            try_files $uri $uri/ /index.html;

            #We nest these locations so we don't have to repeat the CORS headers
            location = /index.html {
                expires -1;
            }

            location /api {
                proxy_set_header Host $host:$server_port;
                proxy_set_header X-Forwarded-Proto https;
                proxy_set_header X-Forwarded-Port $server_port;
                proxy_set_header X-Forwarded-Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_read_timeout 180s;

                # Blue/Green retries
                proxy_next_upstream error timeout http_503 non_idempotent;
                proxy_next_upstream_timeout 30s;
                proxy_next_upstream_tries 4;

                proxy_pass $upstream_girishcodealchemyapp;
            }

            location /socket.io {
                # CORS headers
                more_set_headers "Access-Control-Allow-Origin: $http_origin";
                more_set_headers "Access-Control-Allow-Methods: $cors_allow_methods";
                more_set_headers "Access-Control-Max-Age: $cors_max_age";
                more_set_headers "Access-Control-Allow-Credentials: true";
                more_set_headers "Access-Control-Allow-Headers: $cors_allow_headers";
                more_set_headers "Access-Control-Expose-Headers: $cors_expose_headers";
                proxy_set_header X-Forwarded-Proto https;
                proxy_set_header X-Forwarded-Port $server_port;
                proxy_set_header X-Forwarded-Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_pass http://socket_io:3000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
            }

            location ~* \.(css|js|gif|jpe?g|png|ttf|eot|ico)$ {
                expires max;
                add_header Cache-Control "public";
                #more_set_headers "Access-Control-Allow-Origin: $cors_origin";
            }
        }

        # Some handy test locations
        location = /t/307 { return 307 maintenance.html; }
        location = /t/404 { return 404; }
        location = /t/500 { return 500; }
        location = /t/502 { return 502; }
        location = /t/503 { return 503; }
        location = /t/504 { return 504; }


        error_page 404 /404.html;
        error_page 500 /500.html;
        error_page 502 /502.html;
        error_page 503 /503.html;
        error_page 504 /504.html;
    }

}